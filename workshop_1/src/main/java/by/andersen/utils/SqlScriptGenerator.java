package by.andersen.utils;

import by.andersen.annotations.AutoGenerated;
import java.lang.reflect.Field;
import java.lang.reflect.Modifier;
import java.util.Arrays;

public class SqlScriptGenerator {
  public static String generateSave(String currentSchema, String tableName, Class entityClass) {
    StringBuilder sql = new StringBuilder("INSERT INTO " + currentSchema + "." + tableName + " (");
    StringBuilder valuesPlaceholder = new StringBuilder("VALUES (");

    Field[] nonStaticFields = Arrays.stream(entityClass.getDeclaredFields())
        .filter(f -> !Modifier.isStatic(f.getModifiers()))
        .toArray(Field[]::new);

    for (Field field : nonStaticFields) {

      sql.append(field.getName()).append(", ");
      if (field.getAnnotation(AutoGenerated.class) != null) {
        valuesPlaceholder.append("DEFAULT, ");
      } else {
        valuesPlaceholder.append("?, ");
      }
    }

    sql.setLength(sql.length() - 2);
    valuesPlaceholder.setLength(valuesPlaceholder.length() - 2);

    sql.append(") ").append(valuesPlaceholder).append(")");

    return sql.toString();
  }

  public static String generateFindById(String currentSchema, String tableName) {
    return "SELECT * FROM " + currentSchema + "." + tableName + " WHERE id = ?";
  }

  public static String generateFindAll(String currentSchema, String tableName) {
    return "SELECT * FROM " + currentSchema + "." + tableName;
  }

  public static String generateDelete(String currentSchema, String tableName) {
    return "DELETE FROM " + currentSchema + "." + tableName + " WHERE id = ?";
  }
}
